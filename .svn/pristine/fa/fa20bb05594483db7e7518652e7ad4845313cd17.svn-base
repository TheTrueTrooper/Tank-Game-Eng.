using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using System.Diagnostics;
using System.Drawing.Drawing2D;

namespace CMPE2800Tank {
    public partial class Form1 : Form {
        /// <summary>
        /// THREADING stuff
        /// </summary>
        //theads to handle rendering and logic
        Thread renderThread, updateThread;
        /// <summary>
        /// are we running
        /// </summary>
        //flag to handle thread life
        private volatile bool isRunning = false;
        /// <summary>
        /// update lock object
        /// </summary>
        //object to lock access to entities while rendering and updating
        private object updateLock = new object();
        /// <summary>
        /// call back for sending text back
        /// </summary>
        /// <param name="ent"></param>
        //delegate for passing Entity from logic thread to main form
        public delegate void delVoidEntity(Entity ent);
        private delVoidEntity sendEntityDelegate;

        /// <summary>
        /// call back for the text to be sent back to the form
        /// </summary>
        /// <param name="text"></param>
        public delegate void delVoidString(string text);
        private delVoidString sendText;


        Stopwatch timer = new Stopwatch();
        readonly TimeSpan GameLength = new TimeSpan(0, 0, 5);
        TimeSpan TimeLeft;

        /// <summary>
        /// a list of I controllers waiting for a tank respawn
        /// </summary>
        List<IControl> NeedTank = new List<IControl>();

        /// <summary>
        /// the location of the text
        /// </summary>
        Bitmap BackGroundLocal = null;

        /// <summary>
        /// GAME STUFF
        /// </summary>
        //objects such as tanks, bullets, walls, etc
        private List<Entity> entities = new List<Entity>();
        private List<Particle> particles = new List<Particle>();

        /// <summary>
        /// the player controllers
        /// </summary>
        //controllers
        Controller controlP1, controlP2;

        /// <summary>
        /// random number generator
        /// </summary>
        public static Random rng { get; } = new Random();

        
        /// <summary>
        /// Set ups the delegate for the stuff
        /// </summary>
        public Form1() {
            InitializeComponent();

            sendEntityDelegate = new delVoidEntity(AddBullet);
            sendText = new delVoidString(UpdateText);
            

        }
        /// <summary>
        /// sets up the game
        /// </summary>
        private void InitializeGame() {
            
                timer.Reset();
                timer.Start();
                TimeLeft = GameLength;
                //reset controlers and actors
                controlP1 = new Controller(1);
                controlP2 = new Controller(2);
                entities.Clear();
                particles.Clear();

                //load a map map
                try
                {
                    //ask the Loader for a map will be random
                    Map Temp = MapLoader.LoadMap();

                    //try and load a background if not we will dynamicly create a back ground
                    if (Temp.BackGround != null)
                        BackGroundLocal = new Bitmap(Environment.CurrentDirectory + "\\..\\..\\LevelBackGround\\" + Temp.BackGround);

                    //set the window size for map
                    ClientSize = new Size(MapLoader.TileSize * Temp.sizeX, MapLoader.TileSize * Temp.sizeY);

                    //grab loaded items and actors(entities (i like udk coff))
                    Temp.Objects.ForEach(x => entities.Add(x));
                }
                catch (Exception e)
                {
                    // if ther is a breakdown of any kind notify the player a
                    MessageBox.Show("Failed to load a map" + e + "\nForm closing now!");
                    Close();
                }

                //add players
                Tank tankP1 = new Tank(controlP1, sendEntityDelegate, new PointF(ClientSize.Width - 64, ClientSize.Height - 64), 180, Color.Blue);
                Tank tankP2 = new Tank(controlP2, sendEntityDelegate, new PointF(64, 64), 0, Color.Green);
                entities.Add(tankP1);
                entities.Add(tankP2);

                //set running flag
                isRunning = true;
            

        }

        private void Form1_Load(object sender, EventArgs e) {

            InitializeGame();

            //start rendering thread
            renderThread = new Thread(RenderThread);
            renderThread.IsBackground = true;
            renderThread.Start();

            //start logic thread
            updateThread = new Thread(UpdateThread);
            updateThread.IsBackground = true;
            updateThread.Start();
        }

        private void RenderThread() {
            while (isRunning) {
                //render using double buffered graphics
                using (BufferedGraphicsContext bgc = new BufferedGraphicsContext()) {
                    using (BufferedGraphics bg = bgc.Allocate(CreateGraphics(), ClientRectangle)) {
                        //clear screen
                        bg.Graphics.Clear(Color.Black);
                        //use anti aliasing
                        bg.Graphics.SmoothingMode = SmoothingMode.AntiAlias;

                        //draw stuff
                        lock (updateLock) {
                            Draw(bg.Graphics);
                        }                       

                        //render backbuffer to frontbuffer
                        bg.Render();
                    }
                }
                //free thread for other tasks
                Thread.Sleep(1);
            }
        }
        
        private void UpdateThread() {
            while (isRunning) {
                
                lock (updateLock) {
                    //start mesuring time for action

                    //update objects
                    UpdateLogic(timer.Elapsed);
                    // stop mesuring time for action                               
                }
                
                //this.Invoke(new delVoidString(UpdateText), new object[] { "T:" + timer.Elapsed.Milliseconds });
    

                Thread.Sleep(20);
            }
        }

        private void UpdateLogic(TimeSpan Elapesed) {
            lock(updateLock)
                TimeLeft = GameLength - Elapesed;

            //update objects
            for (int i = 0; i < entities.Count; i++) {
                entities[i].Tick();

                //kill bullets out of bounds
                if (entities[i] is Bullet && !Utility.IsPointInRectangle(entities[i].position, ClientRectangle)) {
                    entities[i].IsMarkedForDeath = true;
                }

                //wrap position
                if (entities[i] is Tank) {
                    PointF pos = entities[i].position;
                    if (pos.X < 0) pos.X = ClientRectangle.Width;
                    if (pos.X > ClientRectangle.Width) pos.X = 0;
                    if (pos.Y < 0) pos.Y = ClientRectangle.Height;
                    if (pos.Y > ClientRectangle.Height) pos.Y = 0;
                    entities[i].position = pos;
                }
            }

            //collision detection
            Graphics gr = CreateGraphics();
            foreach (Entity a in entities) {
                foreach (Entity b in entities) {
                    //escape unessesary checks
                    if (a.Equals(b)) continue; //ignore self

                    if (a is Wall && b is Wall) continue;//ingore wall on wall
                       
                    if (a is Bullet && b is Bullet) continue; //ignore bullet on bullet

                    //if (a is Wall && b is Bullet) continue;                   

                    //check collide
                    a.DetectColish(b, gr);
                }
            }

            //add explode animation
            HandleExplosions();
            //update particles
            particles.ForEach(o => o.Tick());
            //remove dead particles
            particles.RemoveAll(o => o.life <= 0);

            entities.Where(o => o.IsMarkedForDeath && o is Tank).ToList().ForEach(x => NeedTank.Add((x as Tank).controller));
            //removed dead objects
            entities.RemoveAll(o => o.IsMarkedForDeath);

            NeedTank.ForEach(x => entities.Add(Spawn.SpawnTank(x, sendEntityDelegate, entities.TankListFromEntities())));
            NeedTank = new List<IControl>();

            if(Elapesed > GameLength)
            {
                if (controlP1.PlayerScore != controlP2.PlayerScore)
                    MessageBox.Show(controlP1.PlayerScore > controlP2.PlayerScore ? controlP1 + " won!" : controlP2 + " won!");
                else
                    MessageBox.Show("It was a tie");
                if (DialogResult.Yes == MessageBox.Show("Do you want to contuine playing", "New Game", MessageBoxButtons.YesNo))
                    lock (updateLock)
                        Invoke(new Action(() => InitializeGame()));
                else
                    Invoke(new Action(() => Close()));
            }
        }

        /// <summary>
        /// Check for dead tanks, add particles at that position
        /// to create explosion effect
        /// </summary>
        private void HandleExplosions() {
            //define explosion 
            int numParticles = 60;
            byte life = 60;
            float speed = 5f;

            foreach (Entity e in entities) {
                //if a tank dies
                if (e.IsMarkedForDeath && e is Tank) {
                    //add lots of particles in random directions
                    AddParticles(numParticles, life, speed, e.position, e.color);

                }
            }
            
        }

        /// <summary>
        /// Add particles to game.
        /// </summary>
        private void AddParticles(int numParticles, byte life, float speed, PointF pos, Color color) {
            for (int i = 0; i < numParticles; i++) {
                Particle p = new Particle();
                p.pos = pos;
                p.vel = Utility.Vector(rng.Next(0, 361), (float)rng.NextDouble() * speed);
                p.life = (byte)rng.Next(life);
                p.color = new SolidBrush(color);
                particles.Add(p);
            }
        }

        private void Draw(Graphics graphics) {
            //draw background
            drawBackground(graphics, 32);

            //draw objects
            entities.ForEach(o => o.Render(graphics));

            //draw particles
            particles.ForEach(o => graphics.FillEllipse(o.color, o.pos.X, o.pos.Y, 4, 4));

            //draw score
            graphics.FillRectangle(new SolidBrush(Color.FromArgb(150, Color.Black)), 10, 10, 160, 20);
            graphics.DrawString(String.Format("SCORE: {0} | {1}   Time Left: {2}", controlP1.PlayerScore, controlP2.PlayerScore, TimeLeft), new Font(FontFamily.GenericMonospace, 14), Brushes.White, 10, 10);

            //graphics.DrawPie()
        }

        private void drawBackground(Graphics graphics, int gridSize) {
            if (BackGroundLocal == null)
            {
                //define colors
                Brush colorTileA = Brushes.DarkGray;
                Brush colorTileB = Brushes.Silver;
                Pen colorGrid = Pens.Gray;

                //draw alterating tiles
                for (int xx = 0; xx * gridSize < ClientSize.Width; xx++)
                {
                    for (int yy = 0; yy * gridSize < ClientSize.Width; yy++)
                    {
                        if (xx % 2 == 0)
                        {
                            if (yy % 2 == 0)
                            {
                                graphics.FillRectangle(colorTileA, xx * gridSize, yy * gridSize, gridSize, gridSize);
                            }
                            else
                            {
                                graphics.FillRectangle(colorTileB, xx * gridSize, yy * gridSize, gridSize, gridSize);
                            }
                        }
                        else
                        {
                            if (yy % 2 == 1)
                            {
                                graphics.FillRectangle(colorTileA, xx * gridSize, yy * gridSize, gridSize, gridSize);
                            }
                            else
                            {
                                graphics.FillRectangle(colorTileB, xx * gridSize, yy * gridSize, gridSize, gridSize);
                            }
                        }
                    }
                }

                //draw grid
                for (int x = 0; x < ClientSize.Width; x += gridSize)
                {
                    //verticle lines
                    graphics.DrawLine(colorGrid, x, 0, x, ClientSize.Height);
                }
                for (int y = 0; y < ClientSize.Height; y += gridSize)
                {
                    //horizontal lines
                    graphics.DrawLine(colorGrid, 0, y, ClientSize.Width, y);
                }

            }
            else
            { 
                Brush TextureTile = new TextureBrush(BackGroundLocal);
                
                for (int xx = 0; xx * gridSize < ClientSize.Width; xx++)
                {
                    for (int yy = 0; yy * gridSize < ClientSize.Width; yy++)
                    {
                        graphics.FillRectangle(TextureTile, xx * gridSize, yy * gridSize, gridSize, gridSize);
                    }
                }
            }
        }

        public void AddBullet(Entity bullet) {
            entities.Add(bullet);
        }

        public void UpdateText(string txt) {
            Text = txt;
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e) {
            isRunning = false; //set flag to end threads
            renderThread.Abort();
            updateThread.Abort();
        }


        private void Form1_KeyDown(object sender, KeyEventArgs e) {
            controlP1.HandleKeyDown(e.KeyCode);
            controlP2.HandleKeyDown(e.KeyCode);
        }

        private void Form1_KeyUp(object sender, KeyEventArgs e) {
            controlP1.HandleKeyUp(e.KeyCode);
            controlP2.HandleKeyUp(e.KeyCode);
        }

        private void Form1_Resize(object sender, EventArgs e) {
            Text = Width + "," + Height;
        }

        private void Form1_MouseMove(object sender, MouseEventArgs e) {
            //tankP1.cannonAngle = Utility.AngleTo(tankP1.position, new PointF(e.X, e.Y));
        }     

        private void Form1_MouseUp(object sender, MouseEventArgs e) {
            /*
            tankP1.fireCannon = false;

            //TODO: move into Tank class. Pass object through delegate
            //TODO: add offset to initial position to end of cannon
            float bulletSpeed = 5f;
            float dx = ((float)Math.Cos(tankP1.cannonAngle * Math.PI / 180) * bulletSpeed);
            float dy = ((float)Math.Sin(tankP1.cannonAngle * Math.PI / 180) * bulletSpeed);
            lock (updateLock) {
                gameObjects.Add(new Bullet(tankP1.position, Color.White, dx, dy));
            }*/
        }

        private void Form1_MouseDown(object sender, MouseEventArgs e) {
            
            //test explosion
            lock (updateLock) {
                AddParticles(60, 60, 5, new PointF(e.X, e.Y), Color.FromArgb(rng.Next(256), rng.Next(256), rng.Next(256)));
            }
        }
    }
}
