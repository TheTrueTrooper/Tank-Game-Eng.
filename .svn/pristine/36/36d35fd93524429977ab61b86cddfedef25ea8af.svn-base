using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMPE2800Tank {

    class Line
    {
        public PointF Start, Finish;
        public Line(PointF Star, PointF Fin)
        {
            Start = Star;
            Finish = Fin;
        }
    }
    class Wall : Entity {

        private static GraphicsPath model = null;
        private List<Line> Lines = new List<Line>();
        private static int size = 32;
        

        float hitPoints = 100;//hitpoints for wall destruction

        protected void AddCrack() 
        { 
            Lines.Add(new Line(new Point(RandomNumber.Next(8), RandomNumber.Next(8)), new Point(RandomNumber.Next(24, 32), RandomNumber.Next(24,32))));    
        } 

        public Wall(PointF pos, float rot, Color col) : base(pos, rot, col) {
            model = new GraphicsPath();
            model.AddPolygon(Utility.CreateRectangle(size, size).ToArray());
        }

        public override GraphicsPath GetPath() {
            GraphicsPath graphicsPath = (GraphicsPath)model.Clone();
            Matrix matrix = new Matrix();
            matrix.Translate(position.X, position.Y);
            graphicsPath.Transform(matrix);

            return graphicsPath;
        }

        public override void Render(Graphics gr)
        {
            //draw model
            base.Render(gr);

            //draw outline to differentiate between walls
            gr.DrawRectangle(Pens.Blue, position.X-size/2, position.Y-size/2, size, size);

            //this is what i would do for simplicity, instead of graphics path
            //Lines.ForEach(o => gr.DrawLine(Pens.Black, o.Start, o.Finish));
            

            //draw cracks
            using (GraphicsPath LinesDrawn = new GraphicsPath())
            {
                foreach (Line l in Lines)
                {
                    LinesDrawn.AddLine(l.Start, l.Finish);
                }
                using (Matrix matrix = new Matrix())
                {
                    matrix.Translate(position.X, position.Y);
                    LinesDrawn.Transform(matrix);
                }
            }
        }

        internal override void Tick() {
            return;
        }
    }
}
