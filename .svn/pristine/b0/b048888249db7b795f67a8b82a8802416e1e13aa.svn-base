using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMPE2800Tank {
    class Tank : Entity {

        public IControl controller;

        //controls
        //public bool moveForward, moveBackward;
        //public bool rotateLeft, rotateRight;
        //public bool fireCannon;


        //attributes
        private static float bodySize = 30;
        private static float cannonSize = 8;
        private static float movementSpeed = 2f;
        private static float rotationSpeed = 1.5f;

        public float cannonAngle;
        //private StopWatch timeSinceLastShot;
        //private float bulletSize;
        //public int ammo, maxAmmo;

        //graphics model
        private readonly GraphicsPath bodyModel = null;//body
        private readonly GraphicsPath cannonModel = null;//weapon


        public Tank(IControl Controller, PointF pos, float rot, Color col) : base(pos, rot, col) {
            this.controller = Controller;

            //create rectangle base for body of tank
            //create graphicspath from points
            bodyModel = new GraphicsPath();
            bodyModel.AddPolygon(Utility.CreateRectangle(bodySize, bodySize * 1.5f).ToArray());

            //create rectangle for cannon
            List<PointF> points = new List<PointF>();
            points.Add(new PointF(cannonSize * 4f, cannonSize/2));
            points.Add(new PointF(cannonSize * 4f, -cannonSize/2));
            points.Add(new PointF(0, -cannonSize/2));  
            points.Add(new PointF(0, cannonSize/2));  
            //create graphicspath from points
            cannonModel = new GraphicsPath();
            cannonModel.AddPolygon(points.ToArray());
            //cannonModel.AddPolygon(CreateRectangle(cannonSize, cannonSize * 1.5f).ToArray());
        }

        public override GraphicsPath GetPath() {
            GraphicsPath graphicsPath = (GraphicsPath)bodyModel.Clone();
            Matrix matrix = new Matrix();
            matrix.Translate(position.X, position.Y);
            matrix.Rotate(rotation);
            graphicsPath.Transform(matrix);
            return graphicsPath;
        }

        public GraphicsPath GetCannonPath() {
            GraphicsPath graphicsPath = (GraphicsPath)cannonModel.Clone();
            Matrix matrix = new Matrix();
            matrix.Translate(position.X, position.Y);
            matrix.Rotate(cannonAngle);
            graphicsPath.Transform(matrix);
            return graphicsPath;
        }

        public override void Render(Graphics gr) {
            //draw body
            gr.FillPath((Brush)new SolidBrush(color), GetPath());

            //draw cannon
            gr.FillPath((Brush)new SolidBrush(Color.Red), GetCannonPath());
        }

        internal override void Tick() {

            if (controller.MoveForward) {
                //move forwards based on rotation
                float dx = (float)Math.Cos(rotation * Math.PI / 180) * movementSpeed;
                float dy = (float)Math.Sin(rotation * Math.PI / 180) * movementSpeed;
                position.X += dx;
                position.Y += dy;
            }

            if (controller.MoveBackward) {
                //move backwards based on rotation
                float dx = (float)Math.Cos(rotation * Math.PI / 180) * movementSpeed;
                float dy = (float)Math.Sin(rotation * Math.PI / 180) * movementSpeed;
                position.X -= dx;
                position.Y -= dy;
            }

            //left
            if (controller.RotateLeft) {
                rotation -= rotationSpeed;
            }

            //right
            if (controller.RotateRight) {
                rotation += rotationSpeed;
            }
        }
    }
}
