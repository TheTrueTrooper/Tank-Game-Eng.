using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMPE2800Tank {
    class Tank : Entity {

        public IControl controller;

        //flag to charge power of bullet (bigger = more damage)
        private bool charge = false;
        private float scale = 1f;
        private float maxPower = 5f;
        private Bullet bulletInBarrel = new Bullet(new PointF(), 1, Color.White, 0,0);

        //attributes
        private static float bodySize = 30;
        private static float cannonSize = 8;
        private float movementSpeed = 2f;
        private static float rotationSpeed = 1.5f;
        private float bulletSpeed = 5f;
        private float cannonAngle = 0f;      
        private long shootDelay = 500;//time between shots threshold
        private Stopwatch timeSinceLastShot = new Stopwatch();

        //graphics model
        private readonly GraphicsPath bodyModel = null;//body
        private readonly GraphicsPath cannonModel = null;//weapon

        //delegate to send new bullets to main thread collection of game objects
        private Form1.delVoidEntity addBulletDelegate;

        public Tank(IControl Controller, Form1.delVoidEntity sendEntity, PointF pos, float rot, Color col) : base(pos, rot, col) {
            this.controller = Controller;
            addBulletDelegate = sendEntity;

            //create rectangle base for body of tank
            //create graphicspath from points
            bodyModel = new GraphicsPath();
            bodyModel.AddPolygon(Utility.CreateRectangle(bodySize, bodySize * 1.5f).ToArray());

            //create rectangle for cannon
            List<PointF> points = new List<PointF>();
            points.Add(new PointF(cannonSize * 4f, cannonSize/2));
            points.Add(new PointF(cannonSize * 4f, -cannonSize/2));
            points.Add(new PointF(0, -cannonSize/2));  
            points.Add(new PointF(0, cannonSize/2));  
            //create graphicspath from points
            cannonModel = new GraphicsPath();
            cannonModel.AddPolygon(points.ToArray());
            //cannonModel.AddPolygon(CreateRectangle(cannonSize, cannonSize * 1.5f).ToArray());
        }

        public override GraphicsPath GetPath() {
            GraphicsPath graphicsPath = (GraphicsPath)bodyModel.Clone();
            Matrix matrix = new Matrix();
            matrix.Translate(position.X, position.Y);
            matrix.Rotate(rotation);
            graphicsPath.Transform(matrix);
            return graphicsPath;
        }

        public GraphicsPath GetCannonPath() {
            GraphicsPath graphicsPath = (GraphicsPath)cannonModel.Clone();
            Matrix matrix = new Matrix();
            matrix.Translate(position.X, position.Y);
            matrix.Rotate(cannonAngle);
            graphicsPath.Transform(matrix);
            return graphicsPath;
        }

        public override void Render(Graphics gr) {
            //draw body
            gr.FillPath((Brush)new SolidBrush(color), GetPath());

            //draw cannon
            gr.FillPath((Brush)new SolidBrush(Color.Red), GetCannonPath());

            if (charge) {
                //float diameter = 4 * scale;
                //gr.FillEllipse(Brushes.AliceBlue, position.X-diameter/2, position.Y-diameter/2, diameter, diameter);
                bulletInBarrel.scale = scale;
                bulletInBarrel.position = position;
                bulletInBarrel.Render(gr);
            }
        }

        internal override void Tick() {

            if (controller.MoveForward) {
                //move forwards based on rotation
                float dx = (float)Math.Cos(rotation * Math.PI / 180) * movementSpeed;
                float dy = (float)Math.Sin(rotation * Math.PI / 180) * movementSpeed;
                position.X += dx;
                position.Y += dy;
            }

            if (controller.MoveBackward) {
                //move backwards based on rotation
                float dx = (float)Math.Cos(rotation * Math.PI / 180) * movementSpeed;
                float dy = (float)Math.Sin(rotation * Math.PI / 180) * movementSpeed;
                position.X -= dx;
                position.Y -= dy;
            }

            //left
            if (controller.RotateLeft) {
                rotation -= rotationSpeed;
            }

            //right
            if (controller.RotateRight) {
                rotation += rotationSpeed;
            }

            //cannon left
            if (controller.CannonLeft) {
                cannonAngle -= rotationSpeed;
            }

            //cannon right
            if (controller.CannonRight) {
                cannonAngle += rotationSpeed;
            }

            //fire           
            if (controller.FireCannon) {
                charge = true;
                scale += 0.04f;//charge projectile       
                if (scale > maxPower) {//cap power
                    scale = maxPower;
                }           
            } else if (charge) {
                //check timer
                if (!timeSinceLastShot.IsRunning || timeSinceLastShot.ElapsedMilliseconds > shootDelay) {
                    //add bullet
                    float dx = ((float)Math.Cos(cannonAngle * Math.PI / 180) * bulletSpeed);
                    float dy = ((float)Math.Sin(cannonAngle * Math.PI / 180) * bulletSpeed);
                    addBulletDelegate.Invoke(new Bullet(position, scale, color, dx, dy));

                    //reset timer
                    timeSinceLastShot.Reset();
                    timeSinceLastShot.Start();

                    //reset charge flag
                    charge = false;
                    scale = 1f;
                }
            }
        }
    }
}
